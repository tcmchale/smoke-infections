---
title: "cleaning data"
author: "thomas mchale"
format: html
editor: visual
echo: true
warning: false
error: false
embed-resources: true
---

```{r}
#libraries
library(dplyr)
library(tidycensus)
library(tidyverse)
library(tidyr)
library(sf)
library(sp)
library(ggplot2)
library(tmap)
library(gstat)
library(gganimate)
library(lubridate)
library(transformr)
library(shiny)
library(leaflet)
```

## loading data

```{r}
#| echo: false


setwd("~/Desktop/Wildfire-fungi-project/repository/smoke-infections")

california_centroid <- st_read("final-project/shapefiles/smoke/california_smoke_county_centroids.shp")

smoke_dly <- read.csv("final-project/daily-10km-smokePM/smoke_daily_10km.csv")
#smoke_avg <- read.csv("final-project/daily-10km-smokePM/daily_average_smokePM-pred.csv")

covid <- read.csv("final-project/covid-19/data/covid_counties_date.csv")
mask <- read.csv("final-project/covid-19/data/mask-use-survey.csv")

#grids
tenkm <- st_read("final-project/shapefiles/grids/10km_grid_wgs84.shp")
county <- st_read("final-project/shapefiles/grids/us_county_continental.shp")



```

## cleaning data

```{r}
#subset 2020
smoke_2020 <- filter(smoke_avg, substr(date, 1, 4) == "2020") %>%
  rename(ID = grid_id_10km)

# filter county shapefile to include only California counties
ca_county <- filter(county, STATEFP == "06")


#tenkm as sf
tenkm_sf <- st_as_sf(tenkm)

#cut tenkm with california counties
tenkm_california <- st_intersection(tenkm, california_counties)

#add smoke to tenkm_ca
tenkm_casmoke <- full_join(tenkm_california, smoke_2020, by = "ID")

#filter covid file to just California
covid <- filter(covid, state == "California") %>%
  rename(NAME = county)


```

```{r}
library(dplyr)

# Convert tenkm_casmoke to sf object and project to the same CRS as ca_county
tenkm_casmoke_sf <- st_as_sf(tenkm_casmoke, coords = c("COORDX", "COORDY"), crs = st_crs(ca_county))
tenkm_casmoke_sf <- st_transform(tenkm_casmoke_sf, st_crs(ca_county))

# Spatial join to get the county for each 10km grid cell
tenkm_casmoke_county <- st_join(tenkm_casmoke_sf, ca_county)
tenkm_casmoke_county$date <- as.Date(tenkm_casmoke_county$date, format = "%Y-%m-%d")


# Group by date and county and calculate the mean for each group
county_mean_smoke <- tenkm_casmoke_county %>%
  group_by(date, NAME.x) %>%
  summarise(mean_smoke = mean(mean))

tenkm_casmoke_county <- st_make_valid(tenkm_casmoke_county)

county_smoke <- tenkm_casmoke_county %>%
  group_by(date, NAME.x) %>%
  summarize(mean_smoke_exposure = mean(mean)) %>%
  ungroup()


## add covid to ca_county
county_covid <- full_join(covid, ca_county, by = "NAME")
county_covidsf <- st_as_sf(county_covid)

```

## Animate smoke exposure for 2020

```{r}

#ca_county as sf
ca_county_sf <- st_as_sf(ca_county)
# Remove rows with missing values
county_smoke <- na.omit(county_smoke)


# create base map plot
base_plot <- ggplot(county_smoke, aes(geometry = geometry)) + 
  geom_sf(fill = "white", color = "gray", size = 0.1) +
  theme_void()

# create animation
animation <- base_plot + 
  geom_sf(aes(fill = mean_smoke_exposure), size = 0.1) +
  scale_fill_gradient(low = "white", high = "red") +
  transition_time(date) +
  labs(title = "Date: {frame_time}") +
  ease_aes('linear') +
  view_follow(fixed_y = TRUE) +
  coord_sf(xlim = st_bbox(ca_county_sf)$xmin,
           ylim = st_bbox(ca_county_sf)$ymin) +
  theme(legend.position = "bottom")

# save animation as GIF
bbox <- st_bbox(ca_county)
animate(animation, nframes = 200, width = 800, height = 600, res = 150, xlim = c(bbox$xmin, bbox$xmax))


```

## Animate COVID in 2020

```{r}

county_covidsf$date <- lubridate::mdy(county_covidsf$date)
county_covidsf <- st_transform(county_covidsf, crs=4326)
county_covidsf <- st_make_valid(county_covidsf)


# create base map plot
base_plot2 <- ggplot() + 
  geom_sf(data = county_covidsf, aes(fill = cases, geometry=geometry)) +
  scale_fill_gradient(low="white", high = "red")+
  theme_void()

animation2 <- ggplot() + 
  geom_sf(data = county_covidsf, aes(fill = cases, geometry=geometry)) +
  scale_fill_gradient(low="white", high = "red")+
  theme_void() + 
  transition_time(date) + 
  labs(title = "Date: {frame_time}") + 
  ease_aes("linear")

# create animation
animation2 <- base_plot2 + 
  transition_time(date) +
  labs(title = "Date: {frame_time}") +
  ease_aes("linear")

# save animation as GIF
animate(animation2, nframes = 100, width = 800, height = 600, res = 150)

```
