---
title: "Smoke Exposure and COVID-19 in California"
author: Thomas McHale
output: html
editor: visual
toc: true
echo: false
message: false
warning: false
error: false
results: "hide"
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = "~/Desktop/Wildfire-fungi-project/repository/smoke-infections")
```

```{r, echo = FALSE}
library(dplyr)
library(stringr)
library(tidyr)
library(tidycensus)
library(dplyr)
library(sf)
library(ggplot2)
library(scales)
library(maps)
library(mapdata)
library(ggmap)
library(ggspatial)
library(rnaturalearth)
library(rnaturalearthdata)
library(tidyverse)
library(tigris)
library(plotly)
library(mapproj)
library(ggtext)
library(ggrepel)
library(gstat)
library(knitr)
library(rgdal)
library(raster)
library(leaflet)
library(leafem)
library(rgeos)
library(mapview)
library(htmltools)
library(RColorBrewer)
library(viridis)
library(rgdal)
library(automap)

Sys.setenv(SHINY_PROGRESS_BAR = "none")
```

## Interactive Exploration of Association between Smoke Exposure and COVID-19 in 2020

Please navigate to the link in order to explore the incidence of COVID-19 cases and deaths for each month of 2020 as well as the smoke exposure for particulate matter (PM) of 2.5 mm in California in 2020.

You can select each month of 2020 for COVID-19 cases and deaths and it will display the incidence per 10,000 persons for each county for that month. Below the COVID-19 map is an interactive map of smoke exposure. This displays the PM 2.5 mm smoke exposure in each county of California in 2020. You can pick each month to display to correspond to the COVID-19 maps.

Since the influence and timing of smoke exposure leading to a respiratory infection is not clear, this lets you interact with different time points between smoke exposure and COVID-19. For example, if there is an incubation period between smoke exposure that lasts several weeks or months you can look at COVID-19 months after the smoke exposure. This might be expected if smoke exposure causes lung injury that pre-disposes individuals to an increased risk of COVID-19

```{r, results='asis'}
cat("[View the Shiny app](https://mchal053.shinyapps.io/smoke-covid/)")
```

#### COVID-19 Cases in 2020
Alternative to the interactive Shiny app, you can see the animated trend of COVID-19 cases and smoke exposure in California in 2020 below. 

![Animation of COVID-19 cases per 10,000 persons in 2020 by county in California. You can use the Shiny app for an interactive visualization.](images/covid-monthly.gif)

#### Smoke PM 2.5 Exposure in 2020

![Animation of smoke PM 2.5 (Âµg/mL) in 2020 by county in California](images/smoke-monthly.gif)

## Explore the Associations of Population and Demographic Data

```{r, progress=FALSE}
library(dplyr)
#obtain ACS data about population and median income for california

# Now call the counties function without the progress bar
california_county <- tigris::counties(state="CA", year = 2020, progress_bar= FALSE)


california_data <- get_acs(geography = "county", variables = c("B01003_001", "B19013_001"), year = 2020, quietly = TRUE)

cali_wide <- california_data %>% 
  pivot_wider(names_from = variable, values_from = c(estimate, moe), 
              names_sep = "_", values_fn = list) %>%
  rename(population = estimate_B01003_001, 
         population_moe = moe_B01003_001, 
         median_income = estimate_B19013_001, 
         median_income_moe = moe_B19013_001)



#join population and income data to california
california <- merge(california_county, cali_wide, by= "GEOID")
california$population <- unlist(california$population)
california$median_income <- unlist(california$median_income)
california$median_income_moe <- unlist(california$median_income_moe)

## add mask use data
##add mask data
mask <- read.csv("final-project/covid-19/data/mask-use-survey.csv")
mask$COUNTYFP <- as.numeric(as.character(mask$COUNTYFP))
# Filter mask use data for California
mask_ca <- mask %>%
  mutate(StateFIPS = floor(COUNTYFP / 1000)) %>%
  filter(StateFIPS == 6) 
mask_ca$COUNTYFP <- as.character(mask_ca$COUNTYFP)
mask_ca <- mask_ca %>%
  mutate(COUNTYFP = substr(as.character(COUNTYFP), 2, nchar(as.character(COUNTYFP))))

#join mask use survey to the california dataframe
california <- california %>%
  merge(mask_ca, by = "COUNTYFP")

#obtain occupational data
# Define variables to retrieve
variables <- c("B24011_001", "B24011_004", "B24011_016", "B24011_019", "B24011_031", "B24011_034")

# Retrieve data
occ_data <- get_acs(geography = "county", variables = variables, 
                    year = 2020, survey = "acs5", state = "CA")

# Filter for California and relevant labor categories
ca_counties <- occ_data %>% 
  filter(str_detect(variable, "B24011_004|B24011_007|B24011_011"))




# Reshape the data
ca_counties <- occ_data %>% 
  dplyr::select(GEOID, NAME, variable, estimate) %>% 
  pivot_wider(names_from = variable, values_from = estimate) %>% 
  mutate(across(starts_with("B24011"), as.numeric))

# Calculate the total number of laborers and outdoor laborers per county
ca_counties <- ca_counties %>% 
  mutate(total_laborers = rowSums(dplyr::select(., starts_with("B24011"))),
         outdoor_laborers = rowSums(dplyr::select(., c("B24011_031", "B24011_034"))))

# Calculate the rate of outdoor laborers per county as a percentage of total laborers
ca_counties <- ca_counties %>% 
  mutate(outdoor_laborer_rate = outdoor_laborers/total_laborers * 100)

# Calculate the overall rate of outdoor laborers in California
ca_total <- ca_counties %>% 
  summarize(total_laborers = sum(total_laborers),
            outdoor_laborers = sum(outdoor_laborers)) %>% 
  mutate(outdoor_laborer_rate = outdoor_laborers/total_laborers * 100)

california <- merge(ca_counties, california, by= "GEOID")
california$outdoor_laborer_rate <- unlist(california$outdoor_laborer_rate)
california$outdoor_laborers <- unlist(california$outdoor_laborers)

california_sf <- st_as_sf(california)

# Remove ", California" from NAME column
california_sf$NAME <- str_remove(california_sf$NAME, ", California")


```

```{r}
library(rgdal)
# Read the shapefile

ca_smoke <- suppressMessages(readOGR(dsn = "final-project/shapefiles/smoke", 
                                     layer = "california_smoke_county_centroids",
                                     verbose = FALSE))
```

```{r}
#load and manipulate covid data
covid <- read.csv("final-project/covid-19/data/covid_counties_date.csv") %>%
  rename(NAME=county)
covid$date <- lubridate::mdy(covid$date)
county <- st_read("final-project/shapefiles/grids/us_county_continental.shp", quiet = TRUE) %>%
  filter(STATEFP=="06")

covid_data <- full_join(covid, county, by = "NAME")
covid_data <- st_as_sf(covid_data)
covid_data <- covid_data %>%
  filter(state=="California")

cal_pop <- get_acs(geography = "county", 
                   variables = "B01003_001",
                   state = "CA",
                   survey = "acs1",
                   year = 2019)
cal_pop$NAME <- str_remove(cal_pop$NAME, " County, California")


covid.shp <- merge(covid_data, cal_pop, by = "NAME")
covid.shp <- covid.shp %>%
  rename(population = estimate) %>%
  dplyr::select(c(-variable, -moe))
covid.shp$cases_per10k <- (covid.shp$cases/covid.shp$population)*10000
covid.shp$deaths_per10k <- (covid.shp$deaths/covid.shp$population)*10000
```

### Population Map

According to the American Community Survey (ACS) data, California had an estimated population of over 39 million in 2020, making it the most populous state in the United States. The population is diverse, with individuals from various ethnic and racial backgrounds. About 60% of the population resides in urban areas, with the largest cities being Los Angeles, San Diego, and San Jose. The median household income is \$80,440. The education level is diverse, with approximately 31% of the population holding a bachelor's degree or higher. The follwoing map shows the population of each county on a log base 10 scale. You can hover over each county to view additional demographic data.

::: callout-note
Click on a specific county to display population and demographic information. You can zoom in and out with the buttons in the top left corner or scrolling with your mouse.
:::

```{r}
california_sf <- st_transform(california_sf, crs=4326)

# Generate color palette for population data
n_colors <- 6 # Change this to the number of colors you want
pal <- colorNumeric(palette = viridis(n_colors, option = "C"), domain = log10(california_sf$population))

# Create Leaflet map
pop_leaflet <- leaflet() %>%
  addTiles() %>%
  addPolygons(data = california_sf, 
              color = "black", 
              weight = 1, 
              opacity = 1,
              fillOpacity = 0.8,
              fillColor = ~pal(log10(population)),
              popup = paste0("<strong>County:</strong> ", california_sf$NAME, 
                             HTML("<br>"),
                             "<strong>Income:</strong> $", format(california_sf$median_income, big.mark = ","), 
                             HTML("<br>"),
                             "<strong>Population:</strong> ", format(california_sf$population, big.mark = ","), 
                             HTML("<br>"),
                             "<strong>Outdoor laborer rate:</strong> ", round(california_sf$outdoor_laborer_rate), "%")) %>%
  addLegend(position = "bottomright", 
            pal = pal, 
            values = log10(california_sf$population),
            title = "Population (log scale)", 
            labFormat = labelFormat(suffix = " people", big.mark = ","))

# Display Leaflet map
pop_leaflet




```

### Demographic Maps

#### Median Income

```{r}

pal <- colorNumeric(palette = viridis(n_colors, option = "B"), domain = log10(california_sf$median_income))


# Create Leaflet map
income_leaflet <- leaflet() %>%
  addTiles() %>%
  addPolygons(data = california_sf, 
              color = "black", 
              weight = 1, 
              opacity = 1,
              fillOpacity = 0.8,
              fillColor = ~pal(log10(median_income)),
              popup = paste0("<strong>County:</strong> ", california_sf$NAME, 
                             HTML("<br>"),
                             "<strong>Income:</strong> $", format(california_sf$median_income, big.mark = ","), 
                             HTML("<br>"),
                             "<strong>Population:</strong> ", format(california_sf$population, big.mark = ","), 
                             HTML("<br>"),
                             "<strong>Outdoor laborer rate:</strong> ", round(california_sf$outdoor_laborer_rate), "%")) %>%
  addLegend(position = "bottomright", 
            pal = pal, 
            values = log10(california_sf$median_income),
            title = "Median Income ($)", 
            labFormat = labelFormat(suffix = "", big.mark = ","))

# Display Leaflet map
income_leaflet
```

#### Rate of Workers Predominantly Outdoors

Since smoke is likely to affect workers who spend most of their time outdoors, I wanted to look at the rate of outdoor laborers in California. The variables used to determine outdoor laborers compared to all laborers were "B24011_031" and "B24011_034" from the ACS data. These two variables represent the number of workers 16 years and over who worked in farming, fishing, and forestry occupations, specifically those who worked on a farm, ranch, or in an orchard (B24011_031) or those who worked in other farming, fishing, and forestry occupations (B24011_034). These two variables were selected and summed to calculate the total number of outdoor laborers per county. The total number of laborers per county was also calculated by summing all the variables starting with "B24011". The outdoor laborer rate was then determined by dividing the total number of outdoor laborers by the total number of laborers in each county, and multiplying by 100 to express it as a percentage.

```{r}
pal <- colorNumeric(palette = viridis(n_colors, option = "D"), domain = california_sf$outdoor_laborer_rate)


# Create Leaflet map
labor_leaflet <- leaflet() %>%
  addTiles() %>%
  addPolygons(data = california_sf, 
              color = "black", 
              weight = 1, 
              opacity = 1,
              fillOpacity = 0.8,
              fillColor = ~pal(outdoor_laborer_rate),
              popup = paste0("<strong>County:</strong> ", california_sf$NAME, 
                             HTML("<br>"),
                             "<strong>Income:</strong> $", format(california_sf$median_income, big.mark = ","), 
                             HTML("<br>"),
                             "<strong>Population:</strong> ", format(california_sf$population, big.mark = ","), 
                             HTML("<br>"),
                             "<strong>Outdoor laborer rate:</strong> ", round(california_sf$outdoor_laborer_rate), "%")) %>%
  addLegend(position = "bottomright", 
            pal = pal, 
            values = california_sf$outdoor_laborer_rate,
            title = "Outdoor Laborer Rate (%)", 
            labFormat = labelFormat(suffix = "", big.mark = ","))

# Display Leaflet map
labor_leaflet
```

#### Mask Use Survey

This data was taken from the New York Times github COVID-19 page. I am displaying the percent of persons who rated "ALWAYS" wearing a mask, since this was the most common survey response. The other responses can be seen in the label when you hover over the county.

Specifically from the READme.md description at https://github.com/nytimes/covid-19-data/tree/master/mask-use:\
"This data comes from a large number of interviews conducted online by the global data and survey firm Dynata at the request of The New York Times. The firm asked a question about mask use to obtain 250,000 survey responses between July 2 and July 14, enough data to provide estimates more detailed than the state level. (Several states have imposed new mask requirements since the completion of these interviews.)

Specifically, each participant was asked: *How often do you wear a mask in public when you expect to be within six feet of another person?*

This survey was conducted a single time, and at this point we have no plans to update the data or conduct the survey again."

```{r}

pal <- colorNumeric(palette = viridis(n_colors, option = "E"), domain = california_sf$ALWAYS)

# Create Leaflet map
labor_leaflet <- leaflet() %>%
  addTiles() %>%
  addPolygons(data = california_sf, 
              color = "black", 
              weight = 1, 
              opacity = 1,
              fillOpacity = 0.8,
              fillColor = ~pal(ALWAYS),
              popup = paste0("<strong>County:</strong> ", california_sf$NAME, 
                             "<br><strong>Never:</strong> ", round(california_sf$NEVER * 100, 2), "%",
                             "<br><strong>Rarely:</strong> ", round(california_sf$RARELY * 100, 2), "%",
                             "<br><strong>Sometimes:</strong> ", round(california_sf$SOMETIMES * 100, 2), "%",
                             "<br><strong>Frequently:</strong> ", round(california_sf$FREQUENTLY * 100, 2), "%",
                             "<br><strong>Always:</strong> ", round(california_sf$ALWAYS * 100, 2), "%")) %>%
  addLegend(position = "bottomright", 
            pal = pal, 
            values = california_sf$ALWAYS,
            title = "Mask Use (%)", 
            labFormat = labelFormat(suffix = "", big.mark = ","))

# Display Leaflet map
labor_leaflet

```

## Environmental Maps

### Temperature

```{r}
#load data
ca_temp <- raster("rasters/california_avg_temp.tiff", readGDAL=TRUE)

# Convert the raster data to a matrix
ca_temp_matrix <- as.matrix(values(ca_temp))

# Create a color palette
color_pal <- colorNumeric(palette = "YlOrRd", domain = values(ca_temp), na.color = "transparent")

# Define the endpoints of the color scale
min_temp <- min(values(ca_temp), na.rm = TRUE)
max_temp <- max(values(ca_temp), na.rm = TRUE)

#create color scale
colors <- colorRampPalette(c("darkblue", "blue", "green", "yellow"))(100)
# Use the color palette in the colorNumeric function
color_pal <- colorNumeric(palette = colors, domain = c(min_temp, max_temp), na.color = "transparent")


```

### Elevation

```{r}
#load data
ca_elevation <- raster("rasters/california-elevation.tiff")


res = c(240,240)

#resample to lower resolution
ca_elevation_resampled <- projectRaster(ca_elevation, crs = projection(ca_elevation), res = res)

# Convert the raster data to a matrix
ca_elevation_matrix <- as.matrix(values(ca_elevation_resampled))


# Create a color palette that goes from dark blue to blue to green to yellow
color_pal <- colorNumeric(palette = "YlOrRd", domain = values(ca_elevation_resampled), na.color = "transparent")


# Create a leaflet map
m <- leaflet() %>%
  addProviderTiles(providers$Esri.WorldImagery) %>%
  setView(lng = -120, lat = 38, zoom = 5) %>%
  addTiles() %>%
  addRasterImage(ca_elevation_resampled, colors = color_pal, opacity = 0.8) %>%
  addLegend(pal = color_pal, values = ca_elevation_matrix,
            title = "Elevation (meters)", opacity = 0.8) %>%
  addImageQuery(ca_elevation_resampled, na.rm = TRUE,
                layerId = "Elevation",
                format = function(value, location) {
                  paste0("Elevation: ", round(value, 1), " meters")
                })
m
```

## Spatiotemporal Association of Smoke Exposure and COVID-19

In order to determine if there is a spatiotemporal association between smoke esposure and incidence of COVID-19 in California in 2020, we start by looking at the semivariograms of COVID-19 and smoke exposure.

Semivariograms are a method of quantifying the degree of spatial autocorrelation that exists in a dataset. Spatial autocorrelation occurs when the occurrence of a disease in space is correlated with increased incidence of the same disease. A semivariogram describes how the data are related with distance by plotting semivariance against separation distance. Semivariance is defined as the sum of squared distance between each data value and the mean or expected value.

The following example displays the interpretation of the semivariogram values:

![](images/Screenshot%202023-04-30%20at%209.57.55%20PM.png)

Parameters of the spatial model:

-   Nugget is the variance of the random variable at a distance of 0.

-   Partial sill is the variance of the random variable at larger distances.

-   Range is the distance over which spatial autocorrelation is observed. Observed variables within the distance of the range experience spatial autocorrelation while those beyond the range do not.

The variogram is only valid in data that is approximately normally distributed. This is rarely true in observed case incidences in infectious diseases. The histograms display the raw and log transformed case incidences.

```{r}
#create centroids out of counties
covid.centr <- st_centroid(covid.shp)


#log transform cases and deaths
covid.centr$logcase <- log(covid.centr$cases_per10k)
covid.centr$logdeath <- log(covid.centr$deaths_per10k)


#look at histograms
hist.case <- hist(covid.centr$cases_per10k, xlab = "Cases per 10k Persons", main = "observed", 
     border = "white", col = "royalblue2")
hist.logcase <- hist(covid.centr$logcase, ylab = "Cases per 10k Persons", main = "empirical logit",
     border= "white", col = "seagreen3")


#convert to sp
covid.centr_sp <- covid.centr %>%
  st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs = 4326)

coords <- st_coordinates(covid.centr_sp)
#st_covid <- STFDF(covid.centr_sp, time = "date")


cali_v <- variogram(logcase~1, data=covid.centr_sp)
vgm <- vgm(psill=150, model = "Exp", range = 500, nugget = 50000)
covid.fit <- fit.variogram(cali_v, model=vgm, fit.method=1)
plot(cali_v, covid.fit, main = "Semivariogram of COVID Cases")

psill <- covid.fit$psill
range <- covid.fit$range
nugget <- covid.fit$psill[covid.fit$model == "Nug"]

covid_params <- data.frame(
  Parameter = c("nugget", "spherical_psill", "range"),
  Value = c(covid.fit$psill[covid.fit$model == "Nug"], 
            covid.fit$psill[covid.fit$model != "Nug"], 
            covid.fit$range[covid.fit$model != "Nug"]))


kable(covid_params)

#st_kriging <- krigeST(logcase ~ 1, st_ca_smoke, model = st_vgm_model)

```

The semivariogram for COVID-19 cases in 2020 indicates that in California, there was spatial autocorrelation for cases within 128 degrees (or approximately 14 km).

```{r}

# convert data to spatiotemporal object
#covid.st <- st_as_stars(covid.centr)
```

```{r}
#log transform smoke
ca_smoke$logsmoke <- log(ca_smoke$smoke.2020)


#look at histograms
hist.smoke <- hist(ca_smoke$smoke.2020, xlab = "Total Smoke Exposure, 2020", main = "observed", 
     border = "white", col = "royalblue2")
hist.logsmoke <- hist(covid.centr$logcase, ylab = "Cases per 10k Persons", main = "empirical logit",
     border= "white", col = "seagreen3")

#convert to sp
ca_smoke <- ca_smoke %>%
  st_as_sf(coords = c("LONGITUDE", "LATITUDE"), crs = 4326)

coords <- st_coordinates(ca_smoke)


cali_v <- variogram(logsmoke~1, data=ca_smoke)
vgm <- vgm(psill=150, model = "Exp", range = 500, nugget = 50000)
smoke.fit <- fit.variogram(cali_v, model=vgm, fit.method=1)
plot(cali_v, smoke.fit, main = "Semivariogram of Smoke Exposure")

psill <- smoke.fit$psill
range <- smoke.fit$range
nugget <- smoke.fit$psill[smoke.fit$model == "Nug"]

smoke_params <- data.frame(
  Parameter = c("nugget", "spherical_psill", "range"),
  Value = c(smoke.fit$psill[smoke.fit$model == "Nug"], 
            smoke.fit$psill[smoke.fit$model != "Nug"], 
            smoke.fit$range[smoke.fit$model != "Nug"]))


kable(smoke_params)
```

Both COVID-19 cases and smoke exposure in 2020 in California appear to demonstrate substantial spatial autocorrelation up to approximately 130 kilometers. This indicates that there may be correlation between the two variables. The next step will be to build a universal krige model to explore the correlation between these variables. I plan to also include the demographic variables that I have displayed in maps in this project.

I attempted to build a universal krige model but I have not yet gotten it to function.

### attempting to krige

```{r, echo= TRUE, results= 'hide'}

# Aggregate data by week
covid.weekly <- covid.centr %>%
  mutate(week = floor_date(date, "week")) %>%
  group_by(NAME, week) %>%
  summarize(logcase = mean(logcase), date = min(date)) %>%
  ungroup()

# Replace 'covid.centr' with 'covid.weekly' in the subsequent analysis


# Create an empty list to store variograms
variograms <- list()

# Loop over each unique date
for (date in unique(covid.weekly$date)) {
  # Filter the data for the current date
  covid.date <- filter(covid.weekly, date == date)%>%
  print()
  # Compute the variogram for the current date
  variograms[[as.character(date)]] <- variogram(logcase ~ 1, data = covid.date)
}


# Convert the numeric names to proper date format
variogram_dates <- as.Date(as.numeric(names(variograms)), origin = "1970-01-01")

# Assign the correct date names to the variograms list
names(variograms) <- variogram_dates

# Check the updated names
head(names(variograms))


# Initialize lists to store variogram parameters and fitted models
nuggets <- numeric()
psills <- numeric()
ranges <- numeric()
dates <- character()
fitted_variograms <- list()

# Loop over each variogram
#for (date in names(variograms)) {
  # Fit a variogram model using fitted parameters
#  vgm_fit <- fit.variogram(variograms[[date]], model = vgm(psill = 1.129079, model = "Sph", range = 292.0991, nugget = 5.051748), fit.method = 2)
  
  # Store the variogram parameters
  #nuggets <- c(nuggets, vgm_fit$nugget)
 # psills <- c(psills, vgm_fit$psill)
#  ranges <- c(ranges, vgm_fit$range)
 # dates <- c(dates, date)
  
  # Save the fitted variogram model for each time step
#  fitted_variograms[[date]] <- vgm_fit
#}

# Create a data frame with the variogram parameters
#variogram.params <- data.frame(
  #date = as.Date(dates),
  #nugget = nuggets,
  #psill = psills,
  #range = ranges
#)

#plot the nugget, sill and range

# Plot the nugget over time
#ggplot(variogram.params, aes(x = date, y = nugget)) +
 # geom_line() +
  #theme_minimal() +
  #labs(title = "Nugget over time",
   #    x = "Date",
    #   y = "Nugget")

# Plot the partial sill over time
#ggplot(variogram.params, aes(x = date, y = psill)) +
 # geom_line() +
#  theme_minimal() +
#  labs(title = "Partial sill over time",
#       x = "Date",
   #    y = "Partial sill")

# Plot the range over time
#ggplot(variogram.params, aes(x = date, y = range)) +
 # geom_line() +
#  theme_minimal() +
#  labs(title = "Range over time",
#       x = "Date",
#       y = "Range")


```

::: callout-note
The code above never quite ran appropriately. I was able to create a list of variograms for each weekly time point but because there was different types of missing data in each model parameter, extracting the data failed.

All attempts to create a space-time dataframe have failed
:::
